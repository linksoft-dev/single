// source: filter/filter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Direction', null, global);
goog.exportSymbol('proto.Filter', null, global);
goog.exportSymbol('proto.Operator', null, global);
goog.exportSymbol('proto.OrderBy', null, global);
goog.exportSymbol('proto.condition', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Filter.repeatedFields_, null);
};
goog.inherits(proto.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Filter.displayName = 'proto.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.condition.displayName = 'proto.condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OrderBy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OrderBy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OrderBy.displayName = 'proto.OrderBy';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Filter.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainFilter: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selectFieldsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    idsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.condition.toObject, includeInstance),
    orconditionsList: jspb.Message.toObjectList(msg.getOrconditionsList(),
    proto.condition.toObject, includeInstance),
    orderbyList: jspb.Message.toObjectList(msg.getOrderbyList(),
    proto.OrderBy.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 7, 0),
    skip: jspb.Message.getFieldWithDefault(msg, 8, 0),
    first: jspb.Message.getFieldWithDefault(msg, 9, 0),
    last: jspb.Message.getFieldWithDefault(msg, 10, 0),
    rawfilter: jspb.Message.getFieldWithDefault(msg, 11, ""),
    ignoresoftdelete: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filter}
 */
proto.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filter;
  return proto.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filter}
 */
proto.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainFilter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSelectFields(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    case 4:
      var value = new proto.condition;
      reader.readMessage(value,proto.condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    case 5:
      var value = new proto.condition;
      reader.readMessage(value,proto.condition.deserializeBinaryFromReader);
      msg.addOrconditions(value);
      break;
    case 6:
      var value = new proto.OrderBy;
      reader.readMessage(value,proto.OrderBy.deserializeBinaryFromReader);
      msg.addOrderby(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSkip(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirst(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLast(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawfilter(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnoresoftdelete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainFilter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelectFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.condition.serializeBinaryToWriter
    );
  }
  f = message.getOrconditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.condition.serializeBinaryToWriter
    );
  }
  f = message.getOrderbyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.OrderBy.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSkip();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getFirst();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getLast();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getRawfilter();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIgnoresoftdelete();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional string main_filter = 1;
 * @return {string}
 */
proto.Filter.prototype.getMainFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setMainFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string select_fields = 2;
 * @return {!Array<string>}
 */
proto.Filter.prototype.getSelectFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setSelectFieldsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.addSelectFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.clearSelectFieldsList = function() {
  return this.setSelectFieldsList([]);
};


/**
 * repeated string ids = 3;
 * @return {!Array<string>}
 */
proto.Filter.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * repeated condition conditions = 4;
 * @return {!Array<!proto.condition>}
 */
proto.Filter.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.condition, 4));
};


/**
 * @param {!Array<!proto.condition>} value
 * @return {!proto.Filter} returns this
*/
proto.Filter.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.condition}
 */
proto.Filter.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};


/**
 * repeated condition Orconditions = 5;
 * @return {!Array<!proto.condition>}
 */
proto.Filter.prototype.getOrconditionsList = function() {
  return /** @type{!Array<!proto.condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.condition, 5));
};


/**
 * @param {!Array<!proto.condition>} value
 * @return {!proto.Filter} returns this
*/
proto.Filter.prototype.setOrconditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.condition}
 */
proto.Filter.prototype.addOrconditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.clearOrconditionsList = function() {
  return this.setOrconditionsList([]);
};


/**
 * repeated OrderBy orderBy = 6;
 * @return {!Array<!proto.OrderBy>}
 */
proto.Filter.prototype.getOrderbyList = function() {
  return /** @type{!Array<!proto.OrderBy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OrderBy, 6));
};


/**
 * @param {!Array<!proto.OrderBy>} value
 * @return {!proto.Filter} returns this
*/
proto.Filter.prototype.setOrderbyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.OrderBy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OrderBy}
 */
proto.Filter.prototype.addOrderby = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.OrderBy, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.clearOrderbyList = function() {
  return this.setOrderbyList([]);
};


/**
 * optional int64 limit = 7;
 * @return {number}
 */
proto.Filter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 skip = 8;
 * @return {number}
 */
proto.Filter.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setSkip = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 first = 9;
 * @return {number}
 */
proto.Filter.prototype.getFirst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setFirst = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 last = 10;
 * @return {number}
 */
proto.Filter.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setLast = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string rawFilter = 11;
 * @return {string}
 */
proto.Filter.prototype.getRawfilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setRawfilter = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool ignoreSoftDelete = 12;
 * @return {boolean}
 */
proto.Filter.prototype.getIgnoresoftdelete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Filter} returns this
 */
proto.Filter.prototype.setIgnoresoftdelete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.condition.prototype.toObject = function(opt_includeInstance) {
  return proto.condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operator: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    not: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    filterOperator: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.condition}
 */
proto.condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.condition;
  return proto.condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.condition}
 */
proto.condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {!proto.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNot(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNot();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFilterOperator();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.condition.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.condition} returns this
 */
proto.condition.prototype.setFieldName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Operator operator = 2;
 * @return {!proto.Operator}
 */
proto.condition.prototype.getOperator = function() {
  return /** @type {!proto.Operator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Operator} value
 * @return {!proto.condition} returns this
 */
proto.condition.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.condition.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.condition} returns this
 */
proto.condition.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool not = 4;
 * @return {boolean}
 */
proto.condition.prototype.getNot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.condition} returns this
 */
proto.condition.prototype.setNot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string filter_operator = 5;
 * @return {string}
 */
proto.condition.prototype.getFilterOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.condition} returns this
 */
proto.condition.prototype.setFilterOperator = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OrderBy.prototype.toObject = function(opt_includeInstance) {
  return proto.OrderBy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OrderBy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderBy.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OrderBy}
 */
proto.OrderBy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OrderBy;
  return proto.OrderBy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OrderBy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OrderBy}
 */
proto.OrderBy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {!proto.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OrderBy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OrderBy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OrderBy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OrderBy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.OrderBy.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OrderBy} returns this
 */
proto.OrderBy.prototype.setFieldName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Direction direction = 2;
 * @return {!proto.Direction}
 */
proto.OrderBy.prototype.getDirection = function() {
  return /** @type {!proto.Direction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Direction} value
 * @return {!proto.OrderBy} returns this
 */
proto.OrderBy.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.Direction = {
  ASC: 0,
  DESC: 1
};

/**
 * @enum {number}
 */
proto.Operator = {
  EQUALS: 0,
  CONTAINS: 1,
  STARTS: 2,
  IN: 3,
  GT: 4,
  GTE: 5,
  LT: 6,
  LTE: 7
};

goog.object.extend(exports, proto);
